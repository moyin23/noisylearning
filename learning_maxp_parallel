function [maxp S F]=learning_maxp_parallel(Jin,Jout,k,g,d,isComplex,pnoise)

n_in=size(Jin,3);  %Count the number of choi operators
C_noise = zeros(d^2,d^2,n_in); 
for i = 1:n_in
    C_noise(:,:,i) = pnoise * eye(d^2)/d + (1-pnoise) * Jin(:,:,i);
end
'PARALLEL PROTOCOL'
    cvx_begin SDP
    %cvx_precision best
    %cvx_precision high
    cvx_solver mosek
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% case of 2 copies
if k==2
    %Declare the SDP variable related to the probability p
    variable p
   % Declare the SDP variables related to S and F
    if isComplex==1
        variable S(d^6,d^6) complex semidefinite
        variable F(d^6,d^6) complex semidefinite
    else
        variable S(d^6,d^6) semidefinite
        variable F(d^6,d^6) semidefinite
    end
% Impose that the relation between input and output must be satisfied
% This is made exploiting the Choi isomorphism
    if g == 2
        for i=1:n_in
            PartialTrace(S * Tensor(transpose(Tensor(Jin(:,:,i),k)) , eye(d^2)) ,[1 2 3 4],[d d d d d d]) == p*Jout(:,:,i);
        end
    end
%    if g == 1
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(Jin(:,:,i), eye(d^2)/d)) , eye(d^2)) ,[1 2 3 4],[d d d d d d]) == p*Jout(:,:,i);
%        end
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(eye(d^2)/d, Jin(:,:,i))) , eye(d^2)) ,[1 2 3 4],[d d d d d d]) == p*Jout(:,:,i);
%        end
%    end
    if g == 1
        for i=1:n_in
            PartialTrace(S * (Tensor(transpose(Tensor(Jin(:,:,i), C_noise(:,:,i))) , eye(d^2)) + Tensor(transpose(Tensor(C_noise(:,:,i), Jin(:,:,i))) , eye(d^2)))/2 ,[1 2 3 4],[d d d d d d]) == p*Jout(:,:,i);
        end
    end
    if g == 0
        PartialTrace(S * Tensor(transpose(Tensor(C_noise(:,:,i), C_noise(:,:,i))) , eye(d^2)) ,[1 2 3 4],[d d d d d d]) == p*Jout(:,:,1);
    end
    maximise p
    C=S+F;
    learning_is_parallel_protocol(C,d,k);
end %end if k==2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% case of 3 copies
if k==3
    %Declare the SDP variable related to the probability p
    variable p
   % Declare the SDP variables related to S and F
    if isComplex==1
        variable S(d^8,d^8) complex semidefinite
        variable F(d^8,d^8) complex semidefinite
    else
        variable S(d^8,d^8) semidefinite
        variable F(d^8,d^8) semidefinite
    end
% Impose that the relation between input and output must be satisfied
% This is made exploiting the Choi isomorphism
    if g == 3
        for i=1:n_in
            PartialTrace(S * Tensor(transpose(Tensor(Jin(:,:,i),k)) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
        end
    end
    if g == 2
        for i=1:n_in
            PartialTrace(S * (Tensor(transpose(Tensor(Jin(:,:,i), Jin(:,:,i), C_noise(:,:,i))) , eye(d^2)) + Tensor(transpose(Tensor(C_noise(:,:,i), Jin(:,:,i), Jin(:,:,i))) , eye(d^2)) + Tensor(transpose(Tensor(Jin(:,:,i), C_noise(:,:,i), Jin(:,:,i))) , eye(d^2)))/3 ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
        end
    end
%    if g == 2
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(Jin(:,:,i), Jin(:,:,i), eye(d^2)/d)) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
%        end
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(eye(d^2)/d, Jin(:,:,i), Jin(:,:,i))) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
%        end
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(Jin(:,:,i), eye(d^2)/d, Jin(:,:,i))) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
%        end
%    end
    if g == 1
        for i=1:n_in
            PartialTrace(S * (Tensor(transpose(Tensor(Jin(:,:,i), C_noise(:,:,i), C_noise(:,:,i))) , eye(d^2)) + Tensor(transpose(Tensor(C_noise(:,:,i), Jin(:,:,i), C_noise(:,:,i))) , eye(d^2)) + Tensor(transpose(Tensor(C_noise(:,:,i), C_noise(:,:,i), Jin(:,:,i))) , eye(d^2)))/3 ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
        end
    end
%    if g == 1
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(Jin(:,:,i), eye(d^2)/d, eye(d^2)/d)) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
%        end
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(eye(d^2)/d, Jin(:,:,i), eye(d^2)/d)) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
%        end
%        for i=1:n_in
%            PartialTrace(S * Tensor(transpose(Tensor(eye(d^2)/d, eye(d^2)/d, Jin(:,:,i))) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,i);
%        end
%    end
    if g == 0
        PartialTrace(S * Tensor(transpose(Tensor(C_noise(:,:,i), C_noise(:,:,i), C_noise(:,:,i))) , eye(d^2)) ,[1 2 3 4 5 6],[d d d d d d d d]) == p*Jout(:,:,1);
    end
    maximise p
    C=S+F;
    learning_is_parallel_protocol(C,d,k);
end %end if k==3
%%%%%%%%%%%%%%%%%%%%%%%%
%finish SDP
    cvx_end
    maxp=p;
end
