%userpath('C:\Users\User\Desktop\new_try\cvx_matlab\cvx')
%cvx_setup
%userpath('C:\Users\User\Desktop\new_try\marco_matlab_unitary_inverse\learning_deterministic_feasible')
clear

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%  Start of Adjustable Parameters  %%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                d=2               %Dimension 'd'
                k=3               %Number of uses 'k'
                g=2               %Number of good unitaries
                chose_protocol=1; %1 for parallel, 2 for sequential, 3 for general
                isComplex=0;      %Set isComples=0 to restric to supermaps with real coefficients
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%   End of Adjustable Parameters   %%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tic;
%Find the maximal success probability of transforming 'k' d-dimensional
%unitaries into its inverse
if chose_protocol==1
    [maxf D]=learning_maxf_dual_parallel(k,g,d,isComplex); %Assuming a parallel protocol
end
if chose_protocol==2
    [maxf D]=learning_maxf_dual_sequential(k,g,d,isComplex);    %Assuming a sequential protocol
end
if chose_protocol==3
    [maxf D]=learning_maxf_dual_general(k,g,d,isComplex);  %Assuming a geleral protocol
end
    maximal_fidelity=maxf
    total_time_in_minutes=toc/60
